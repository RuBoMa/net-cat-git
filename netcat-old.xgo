package main

import (
	"bufio"
	"errors"
	"fmt"
	"io"
	"log"
	"net"
	"os"
	"strings"
	"sync"
	"time"
)

const defaultPort = "8989"

type Client struct {
	Name   string
	Conn   net.Conn
	Writer *bufio.Writer
}

var (
	clients       = make(map[*Client]bool) // Pointers so: Easy to modify and access across the program, reduced risk of race condition,  lower memory use,
	messages      = []string{}
	clientMutex   sync.Mutex
	messageMutex  sync.RWMutex
	messageBuffer = make(chan string, 10) // Buffer for broadcasting messages
)

// Mutual exclusion prevents multiple goroutines from accessing the same resource.
// These may be the slice of connected clients or the chat history.
// Simultaneous writing or reading might cause race conditions and unpredictable behavior.
// Typically, you define a sync.Mutex as part of a struct that holds shared resources. (Not here)
//
// When mutex.Lock() is called, the goroutine takes control of the mutex.
// Any other goroutines that call mutex.Lock() on the same mutex must wait until the
// first goroutine calls mutex.Unlock().
//

func getPort() string {
	port := defaultPort
	if len(os.Args) == 2 {
		port = os.Args[1]
	} else if len(os.Args) > 2 {
		fmt.Println("[USAGE]: ./TCPChat $port")
		os.Exit(1)
	}
	return port
}

func main() {

	initLogger()
	port := getPort()

	shutdown := make(chan struct{})
	done := make(chan bool)

	listener, err := net.Listen("tcp", ":"+port) // Listening on TCP network
	if err != nil {
		fmt.Printf("Error starting server: %v\n", err)
		return
	}
	defer listener.Close()
	fmt.Printf("Listening on the port :%s\n", port)
	fmt.Println("Press 'q' and Enter to shutdown, or use Ctrl+C")
	logEvent("START", "Server", "Server started on port "+port)

	var wg sync.WaitGroup

	// Start message broadcaster
	go broadcastMessages()

	// Handle user input for shutdown
	go func() {
		reader := bufio.NewReader(os.Stdin)
		for {
			char, _, err := reader.ReadRune()
			if err != nil {
				fmt.Println("Error reading input:", err)
				continue
			}
			if char == 'q' || char == 'Q' {
				fmt.Println("\nInitiating shutdown...")
				close(shutdown)
				return
			}
		}
	}()

	// Accept connections
	go func() {
		for {
			select {
			case <-shutdown:
				listener.Close()
				return
			default:
				conn, err := listener.Accept()
				if err != nil {
					if !errors.Is(err, net.ErrClosed) {
						fmt.Printf("Error accepting connection: %v\n", err)
					}
					continue
				}
				wg.Add(1)
				go handleClient(conn, done, shutdown, &wg)
			}
		}
	}()

	// Wait for shutdown signal
	<-shutdown
	fmt.Println("Waiting for all connections to close...")
	logEvent("SHUTDOWN", "Server", "Server shutting down")

	// Wait for all connections to close
	wg.Wait()
	close(done)

	fmt.Println("Server shutdown complete")
	logEvent("SHUTDOWN", "Server", "Shut down complete")
}

func clientNameExists(name string) bool {
	for client := range clients {
		if client.Name == name {
			return true
		}
	}
	return false
}

func handleClient(conn net.Conn, done chan bool, shutdown chan struct{}, wg *sync.WaitGroup) {
	defer conn.Close()
	writer := bufio.NewWriter(conn)
	reader := bufio.NewReader(conn)

	// Send welcome message to the new connection
	writer.WriteString("Welcome to TCP-Chat!\n")
	writer.WriteString(linuxLogo() + "\n[ENTER YOUR NAME]: ")
	writer.Flush() // Write all the buffered data to the writer

	// Ude client's IP address in logs
	address, _, err := net.SplitHostPort(conn.RemoteAddr().String())
	if err != nil {
		log.Printf("Failed to parse client address: %v", err)
		return
	}

	// goroutine to tell name loop to exit
	go func() {
		<-shutdown
		conn.Write([]byte("Server shutting down\n"))
		conn.Close()
		done <- true
	}()

	var name string
	var client *Client
	var out bool
	for {
		select {
		case <-done:
			clientMutex.Lock()
			client = &Client{name, conn, writer}
			clients[client] = true
			clientMutex.Unlock()
			out = true
		default:
			// Get proposed name
			var err error
			name, err = reader.ReadString('\n')
			name = strings.TrimSpace(name)
			if err != nil || name == "" {
				writer.WriteString("Invalid name.\n[ENTER YOUR NAME]: ")
				writer.Flush()
				if err != nil {
					logEvent("INVALID_NAME", address, "Invalid new name request: "+err.Error())
				} else {
					logEvent("INVALID_NAME", address, "Invalid new name request: "+`"`+name+`"`)
				}
				continue
			}

			// Add client to the map if possible
			clientMutex.Lock()

			if clientNameExists(name) {
				writer.WriteString("Name already taken.\n[ENTER YOUR NAME]: ")
				writer.Flush()
				clientMutex.Unlock()
				logEvent("NAME_TAKEN", address, "Taken name requested: "+`"`+name+`"`)
				continue
			}

			if len(clients) >= 10 {
				writer.WriteString("Chat room is full. Connection closed.\n")
				writer.Flush()
				clientMutex.Unlock()
				logEvent("ROOM_FULL", address, "Chat room full, connection closed")
				return
			}

			client = &Client{name, conn, writer}
			clients[client] = true
			clientMutex.Unlock()
			out = true
		}
		if out {
			break
		}
	}

	logEvent("CONNECT", address, "Client "+`"`+name+`"`+" joined")
	sendHistory(client, address, name)
	broadcast(fmt.Sprintf("%s has joined the chat...", name))

	// Listen for messages
	for {
		msg, err := reader.ReadString('\n')
		if err != nil {
			fmt.Println("Client exiting?", err.Error())
			if errors.Is(err, io.EOF) {
				logEvent("DISCONNECT", address, `"`+name+`"`+" disconnected (client terminated)")
			} else {
				logEvent("DISCONNECT", address, `"`+name+`"`+" disconnected")
			}
			break
		}
		msg = strings.TrimSpace(msg)
		if msg == "" {
			logEvent("NOT_SENT", address, "Empty message from "+name+" not sent")
			continue
		}

		if len(msg) > 4 && msg[:5] == "name=" { // change name if message starts thus
			newName := strings.TrimSpace(msg[5:])
			if newName == "" || clientNameExists(newName) {
				if newName == "" {
					writer.WriteString("Invalid new name. Name not changed.\n")
					logEvent("INVALID_NAME", address, "Invalid new name request: "+`"`+newName+`"`+" from "+`"`+name+`"`)
				} else {
					writer.WriteString("Name already taken. Name not changed.\n")
					logEvent("NAME_TAKEN", address, "Taken name change requested: "+`"`+newName+`"`+" by "+`"`+name+`"`)
				}
				writer.Flush()
				continue
			}
			broadcast(fmt.Sprintf("%s has changed their name to %s", name, newName))
			logEvent("NEW_NAME", address, `"`+name+`"`+" changed their name to "+`"`+newName+`"`)
			clientMutex.Lock()
			name = newName
			client.Name = newName
			clientMutex.Unlock()
			continue
		}

		if strings.ToLower(msg) == "exit" || strings.ToLower(msg) == "quit" {
			fmt.Println("Client exiting")
			writer.WriteString("Exiting chat room.\n")
			writer.Flush()
			logEvent("DISCONNECT", address, `"`+name+`"`+" left the chat")
			break
		}

		timestamp := time.Now().Format("2006-01-02 15:04:05")
		formattedMsg := fmt.Sprintf("[%s][%s]: %s", timestamp, name, msg)
		logEvent("MESSAGE", name, msg)
		broadcast(formattedMsg)
	}

	// Handle client disconnection
	clientMutex.Lock()
	delete(clients, client)
	clientMutex.Unlock()
	broadcast(fmt.Sprintf("%s has left the chat...", name))
	wg.Done()
}

// broadcastMessages stores and sends messages to all clients from the message buffer
func broadcastMessages() {
	for msg := range messageBuffer { // messageBuffer is a channel so for loop doesn't exit
		messageMutex.Lock()
		messages = append(messages, msg)
		messageMutex.Unlock()

		clientMutex.Lock()
		for client := range clients {
			client.Writer.WriteString(msg + "\n") // write the messsage into the buffer managed by the bufio.Writer
			client.Writer.Flush()                 // force write the buffered data to the underlying connection
		}
		clientMutex.Unlock()
	}
}

// broadcast sends the string to the messageBuffer channel
func broadcast(msg string) {
	messageBuffer <- msg
}

// sendHistory sends all the previous messages to a clients writer
func sendHistory(client *Client, address, name string) {
	messageMutex.RLock() // RLock allows multiple reads but blocks simultaneous writing
	for _, msg := range messages {
		client.Writer.WriteString(msg + "\n")
	}
	messageMutex.RUnlock()
	client.Writer.Flush()
	logEvent("MSG_HISTORY", address, "Message history sent to client "+`"`+name+`"`)
}

// linuxLogo returns the content of the text file linuxlogo.txt
func linuxLogo() string {
	bytes, err := os.ReadFile("linuxlogo.txt")
	if err != nil {
		fmt.Println("Error:", err.Error())
		os.Exit(1)
	}
	return string(bytes)
}
