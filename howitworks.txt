How It Works
Server accepts connections:

For each connection, HandleClient is called in a separate goroutine.
A Client struct is created, and the client is added to the clients map.
Clients interact:

A client must enter a unique name to join.
Messages are broadcasted to all connected clients.
The server maintains message history and sends it to new clients when they join.
Concurrency:

Mutexes (clientMutex and messageMutex) are used to avoid race conditions when accessing shared data (clients and messages).
Disconnections:

When a client disconnects or leaves the chat, they are removed from the clients map.
A message is broadcasted to notify others of the disconnection.
Key Behaviors
Limits connections to 10 clients.
Ensures unique client names.
Broadcasts messages to all clients, including timestamps and names.
Maintains a message history to share with new clients.
Handles server shutdown gracefully by notifying clients.